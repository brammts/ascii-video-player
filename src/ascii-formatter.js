/**
 * ASCII Formatter - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ASCII –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
 */
class ASCIIFormatter {
    constructor() {
        this.platforms = {
            discord: {
                name: 'Discord',
                icon: 'üí¨',
                format: (ascii) => `\`\`\`\n${ascii}\n\`\`\``,
                description: '```\n–∫–∞–¥—Ä\n```'
            },
            telegram: {
                name: 'Telegram',
                icon: '‚úàÔ∏è',
                format: (ascii) => `\`${ascii}\``,
                description: '`–∫–∞–¥—Ä`'
            },
            twitter: {
                name: 'Twitter/X',
                icon: 'üê¶',
                format: (ascii) => `\`\`\`\n${ascii}\n\`\`\``,
                description: '```\n–∫–∞–¥—Ä\n```'
            },
            reddit: {
                name: 'Reddit',
                icon: 'üî¥',
                format: (ascii) => {
                    // Reddit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 4 –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è –∫–æ–¥–∞
                    const lines = ascii.split('\n');
                    return lines.map(line => `    ${line}`).join('\n');
                },
                description: '    –∫–∞–¥—Ä'
            },
            github: {
                name: 'GitHub',
                icon: 'üêô',
                format: (ascii) => `\`\`\`\n${ascii}\n\`\`\``,
                description: '```\n–∫–∞–¥—Ä\n```'
            },
            plain: {
                name: '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç',
                icon: 'üìÑ',
                format: (ascii) => ascii,
                description: '–∫–∞–¥—Ä'
            }
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ASCII –∫–∞–¥—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @param {string} asciiFrame - ASCII –∫–∞–¥—Ä
     * @param {string} platform - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–¥—Ä
     */
    formatForPlatform(asciiFrame, platform) {
        if (!this.platforms[platform]) {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}`);
        }

        if (!asciiFrame || typeof asciiFrame !== 'string') {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ASCII –∫–∞–¥—Ä');
        }

        return this.platforms[platform].format(asciiFrame);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     * @param {string} platform - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     */
    getPlatformInfo(platform) {
        if (!this.platforms[platform]) {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}`);
        }

        return this.platforms[platform];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º
     */
    getSupportedPlatforms() {
        return Object.keys(this.platforms);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
     * @param {string} asciiFrame - ASCII –∫–∞–¥—Ä
     * @param {string} platform - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @param {number} maxLines - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–≤—å—é
     * @returns {string} - –ü—Ä–µ–≤—å—é –∫–∞–¥—Ä–∞
     */
    createPreview(asciiFrame, platform, maxLines = 10) {
        if (!asciiFrame) {
            return '–ù–µ—Ç –∫–∞–¥—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
        }

        try {
            const formatted = this.formatForPlatform(asciiFrame, platform);
            const lines = formatted.split('\n');
            
            if (lines.length <= maxLines) {
                return formatted;
            } else {
                const previewLines = lines.slice(0, maxLines);
                return previewLines.join('\n') + '\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ' + maxLines + ' —Å—Ç—Ä–æ–∫)';
            }
        } catch (error) {
            return `–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`;
        }
    }

    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async copyToClipboard(text) {
        try {
            if (navigator.clipboard && window.isSecureContext) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API
                await navigator.clipboard.writeText(text);
                return true;
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = text;
                textArea.style.position = 'fixed';
                textArea.style.left = '-999999px';
                textArea.style.top = '-999999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                
                const successful = document.execCommand('copy');
                document.body.removeChild(textArea);
                return successful;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:', error);
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–¥—Ä–∞
     * @param {string} asciiFrame - ASCII –∫–∞–¥—Ä
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–¥—Ä–∞
     */
    getFrameStats(asciiFrame) {
        if (!asciiFrame) {
            return {
                lines: 0,
                characters: 0,
                nonWhitespace: 0,
                width: 0,
                height: 0
            };
        }

        const lines = asciiFrame.split('\n');
        const characters = asciiFrame.length;
        const nonWhitespace = asciiFrame.replace(/\s/g, '').length;
        const width = Math.max(...lines.map(line => line.length));
        const height = lines.length;

        return {
            lines,
            characters,
            nonWhitespace,
            width,
            height
        };
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç ASCII –∫–∞–¥—Ä –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @param {string} asciiFrame - ASCII –∫–∞–¥—Ä
     * @param {string} platform - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     * @param {Object} options - –û–ø—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     * @returns {string} - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–¥—Ä
     */
    optimizeForPlatform(asciiFrame, platform, options = {}) {
        const {
            maxWidth = 80,
            maxHeight = 40,
            trimEmptyLines = true
        } = options;

        let optimized = asciiFrame;

        // –û–±—Ä–µ–∑–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (trimEmptyLines) {
            const lines = optimized.split('\n');
            const trimmedLines = lines.filter(line => line.trim().length > 0);
            optimized = trimmedLines.join('\n');
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        const lines = optimized.split('\n');
        
        if (lines.length > maxHeight) {
            optimized = lines.slice(0, maxHeight).join('\n');
        }

        // –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const optimizedLines = lines.map(line => {
            if (line.length > maxWidth) {
                return line.substring(0, maxWidth);
            }
            return line;
        });

        optimized = optimizedLines.join('\n');

        return optimized;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.ASCIIFormatter = ASCIIFormatter;
